<?php

namespace Proxies\__CG__\App\Entity;


/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Entite extends \App\Entity\Entite implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array<string, null> properties to be lazy loaded, indexed by property name
     */
    public static $lazyPropertiesNames = array (
);

    /**
     * @var array<string, mixed> default values of properties to be lazy loaded, with keys being the property names
     *
     * @see \Doctrine\Common\Proxy\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array (
);



    public function __construct(?\Closure $initializer = null, ?\Closure $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'App\\Entity\\Entite' . "\0" . 'id', '' . "\0" . 'App\\Entity\\Entite' . "\0" . 'nom', '' . "\0" . 'App\\Entity\\Entite' . "\0" . 'description', '' . "\0" . 'App\\Entity\\Entite' . "\0" . 'contact', '' . "\0" . 'App\\Entity\\Entite' . "\0" . 'isBloked', '' . "\0" . 'App\\Entity\\Entite' . "\0" . 'agents', '' . "\0" . 'App\\Entity\\Entite' . "\0" . 'paramTypesDemandes', '' . "\0" . 'App\\Entity\\Entite' . "\0" . 'createdAt', '' . "\0" . 'App\\Entity\\Entite' . "\0" . 'incidents', '' . "\0" . 'App\\Entity\\Entite' . "\0" . 'typeEntite', '' . "\0" . 'App\\Entity\\Entite' . "\0" . 'admins', '' . "\0" . 'App\\Entity\\Entite' . "\0" . 'gestionnaires', '' . "\0" . 'App\\Entity\\Entite' . "\0" . 'isEntreprise', '' . "\0" . 'App\\Entity\\Entite' . "\0" . 'father', '' . "\0" . 'App\\Entity\\Entite' . "\0" . 'batiments', '' . "\0" . 'App\\Entity\\Entite' . "\0" . 'proprietaire', '' . "\0" . 'App\\Entity\\Entite' . "\0" . 'type'];
        }

        return ['__isInitialized__', '' . "\0" . 'App\\Entity\\Entite' . "\0" . 'id', '' . "\0" . 'App\\Entity\\Entite' . "\0" . 'nom', '' . "\0" . 'App\\Entity\\Entite' . "\0" . 'description', '' . "\0" . 'App\\Entity\\Entite' . "\0" . 'contact', '' . "\0" . 'App\\Entity\\Entite' . "\0" . 'isBloked', '' . "\0" . 'App\\Entity\\Entite' . "\0" . 'agents', '' . "\0" . 'App\\Entity\\Entite' . "\0" . 'paramTypesDemandes', '' . "\0" . 'App\\Entity\\Entite' . "\0" . 'createdAt', '' . "\0" . 'App\\Entity\\Entite' . "\0" . 'incidents', '' . "\0" . 'App\\Entity\\Entite' . "\0" . 'typeEntite', '' . "\0" . 'App\\Entity\\Entite' . "\0" . 'admins', '' . "\0" . 'App\\Entity\\Entite' . "\0" . 'gestionnaires', '' . "\0" . 'App\\Entity\\Entite' . "\0" . 'isEntreprise', '' . "\0" . 'App\\Entity\\Entite' . "\0" . 'father', '' . "\0" . 'App\\Entity\\Entite' . "\0" . 'batiments', '' . "\0" . 'App\\Entity\\Entite' . "\0" . 'proprietaire', '' . "\0" . 'App\\Entity\\Entite' . "\0" . 'type'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Entite $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy::$lazyPropertiesDefaults as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @deprecated no longer in use - generated code now relies on internal components rather than generated public API
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId(): ?int
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function getNom(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNom', []);

        return parent::getNom();
    }

    /**
     * {@inheritDoc}
     */
    public function setNom(string $nom): \App\Entity\Entite
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setNom', [$nom]);

        return parent::setNom($nom);
    }

    /**
     * {@inheritDoc}
     */
    public function getDescription(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDescription', []);

        return parent::getDescription();
    }

    /**
     * {@inheritDoc}
     */
    public function setDescription(?string $description): \App\Entity\Entite
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDescription', [$description]);

        return parent::setDescription($description);
    }

    /**
     * {@inheritDoc}
     */
    public function getContact(): ?\App\Entity\Contact
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getContact', []);

        return parent::getContact();
    }

    /**
     * {@inheritDoc}
     */
    public function setContact(\App\Entity\Contact $contact): \App\Entity\Entite
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setContact', [$contact]);

        return parent::setContact($contact);
    }

    /**
     * {@inheritDoc}
     */
    public function getIsBloked(): ?bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIsBloked', []);

        return parent::getIsBloked();
    }

    /**
     * {@inheritDoc}
     */
    public function setIsBloked(?bool $isBloked): \App\Entity\Entite
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIsBloked', [$isBloked]);

        return parent::setIsBloked($isBloked);
    }

    /**
     * {@inheritDoc}
     */
    public function getAgents(): \Doctrine\Common\Collections\Collection
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAgents', []);

        return parent::getAgents();
    }

    /**
     * {@inheritDoc}
     */
    public function addAgent(\App\Entity\Agent $agent): \App\Entity\Entite
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addAgent', [$agent]);

        return parent::addAgent($agent);
    }

    /**
     * {@inheritDoc}
     */
    public function removeAgent(\App\Entity\Agent $agent): \App\Entity\Entite
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeAgent', [$agent]);

        return parent::removeAgent($agent);
    }

    /**
     * {@inheritDoc}
     */
    public function getParamTypesDemandes(): \Doctrine\Common\Collections\Collection
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getParamTypesDemandes', []);

        return parent::getParamTypesDemandes();
    }

    /**
     * {@inheritDoc}
     */
    public function addParamTypesDemande(\App\Entity\ParamTypesDemandes $paramTypesDemande): \App\Entity\Entite
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addParamTypesDemande', [$paramTypesDemande]);

        return parent::addParamTypesDemande($paramTypesDemande);
    }

    /**
     * {@inheritDoc}
     */
    public function removeParamTypesDemande(\App\Entity\ParamTypesDemandes $paramTypesDemande): \App\Entity\Entite
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeParamTypesDemande', [$paramTypesDemande]);

        return parent::removeParamTypesDemande($paramTypesDemande);
    }

    /**
     * {@inheritDoc}
     */
    public function getCreatedAt(): ?\DateTimeInterface
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreatedAt', []);

        return parent::getCreatedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function setCreatedAt(\DateTimeInterface $createdAt): \App\Entity\Entite
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreatedAt', [$createdAt]);

        return parent::setCreatedAt($createdAt);
    }

    /**
     * {@inheritDoc}
     */
    public function getIncidents(): \Doctrine\Common\Collections\Collection
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIncidents', []);

        return parent::getIncidents();
    }

    /**
     * {@inheritDoc}
     */
    public function addIncident(\App\Entity\Incident $incident): \App\Entity\Entite
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addIncident', [$incident]);

        return parent::addIncident($incident);
    }

    /**
     * {@inheritDoc}
     */
    public function removeIncident(\App\Entity\Incident $incident): \App\Entity\Entite
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeIncident', [$incident]);

        return parent::removeIncident($incident);
    }

    /**
     * {@inheritDoc}
     */
    public function getTypeEntite(): ?\App\Entity\TypeEntite
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTypeEntite', []);

        return parent::getTypeEntite();
    }

    /**
     * {@inheritDoc}
     */
    public function setTypeEntite(?\App\Entity\TypeEntite $typeEntite): \App\Entity\Entite
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTypeEntite', [$typeEntite]);

        return parent::setTypeEntite($typeEntite);
    }

    /**
     * {@inheritDoc}
     */
    public function getAdmins(): \Doctrine\Common\Collections\Collection
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAdmins', []);

        return parent::getAdmins();
    }

    /**
     * {@inheritDoc}
     */
    public function addAdmin(\App\Entity\Admin $admin): \App\Entity\Entite
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addAdmin', [$admin]);

        return parent::addAdmin($admin);
    }

    /**
     * {@inheritDoc}
     */
    public function removeAdmin(\App\Entity\Admin $admin): \App\Entity\Entite
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeAdmin', [$admin]);

        return parent::removeAdmin($admin);
    }

    /**
     * {@inheritDoc}
     */
    public function getGestionnaires(): \Doctrine\Common\Collections\Collection
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getGestionnaires', []);

        return parent::getGestionnaires();
    }

    /**
     * {@inheritDoc}
     */
    public function addGestionnaire(\App\Entity\Gestionnaire $gestionnaire): \App\Entity\Entite
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addGestionnaire', [$gestionnaire]);

        return parent::addGestionnaire($gestionnaire);
    }

    /**
     * {@inheritDoc}
     */
    public function removeGestionnaire(\App\Entity\Gestionnaire $gestionnaire): \App\Entity\Entite
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeGestionnaire', [$gestionnaire]);

        return parent::removeGestionnaire($gestionnaire);
    }

    /**
     * {@inheritDoc}
     */
    public function getIsEntreprise(): ?bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIsEntreprise', []);

        return parent::getIsEntreprise();
    }

    /**
     * {@inheritDoc}
     */
    public function setIsEntreprise(bool $isEntreprise): \App\Entity\Entite
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIsEntreprise', [$isEntreprise]);

        return parent::setIsEntreprise($isEntreprise);
    }

    /**
     * {@inheritDoc}
     */
    public function getFather(): ?\App\Entity\Entite
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFather', []);

        return parent::getFather();
    }

    /**
     * {@inheritDoc}
     */
    public function setFather(?\App\Entity\Entite $father): \App\Entity\Entite
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setFather', [$father]);

        return parent::setFather($father);
    }

    /**
     * {@inheritDoc}
     */
    public function getBatiments(): \Doctrine\Common\Collections\Collection
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getBatiments', []);

        return parent::getBatiments();
    }

    /**
     * {@inheritDoc}
     */
    public function addBatiment(\App\Entity\Batiment $batiment): \App\Entity\Entite
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addBatiment', [$batiment]);

        return parent::addBatiment($batiment);
    }

    /**
     * {@inheritDoc}
     */
    public function removeBatiment(\App\Entity\Batiment $batiment): \App\Entity\Entite
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeBatiment', [$batiment]);

        return parent::removeBatiment($batiment);
    }

    /**
     * {@inheritDoc}
     */
    public function getProprietaire(): ?\App\Entity\Proprietaire
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getProprietaire', []);

        return parent::getProprietaire();
    }

    /**
     * {@inheritDoc}
     */
    public function setProprietaire(?\App\Entity\Proprietaire $proprietaire): \App\Entity\Entite
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setProprietaire', [$proprietaire]);

        return parent::setProprietaire($proprietaire);
    }

    /**
     * {@inheritDoc}
     */
    public function getType(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getType', []);

        return parent::getType();
    }

    /**
     * {@inheritDoc}
     */
    public function setType(?string $type): \App\Entity\Entite
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setType', [$type]);

        return parent::setType($type);
    }

}
